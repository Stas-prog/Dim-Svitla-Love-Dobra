import { NextResponse } from "next/server";
import { getDb } from "@/lib/mongo";
import {cloudinaryUrl} from "@/lib/cloudinary";

export const dynamic = "force-dynamic";
export const runtime = "nodejs";
export const revalidate = 0;


type Body = {
  prompt?: string;
  roomId?: string;
  limit?: number;
  // –æ–ø—Ü. PIN, —â–æ–± —É–±–µ—Ä–µ–≥—Ç–∏ –µ–Ω–¥–ø–æ–π–Ω—Ç –≤—ñ–¥ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö
  pin?: string;
};

export async function POST(req: Request) {
  try {
    const { prompt = "", roomId = "", limit = 1, pin = "" } = (await req.json()) as Body;

    // üîí PIN (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ). –Ø–∫—â–æ —É .env.local —î VISION_PIN ‚Äî –≤–∏–º–∞–≥–∞—î–º–æ –∑–±—ñ–≥.
    if (process.env.VISION_PIN) {
      const okPin = pin || req.headers.get("x-pin") || "";
      if (okPin !== process.env.VISION_PIN) {
        return NextResponse.json({ ok: false, error: "forbidden" }, { status: 403 });
      }
    }

    const db = await getDb();
    const col = db.collection("snaps"); // –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑ { roomId, publicId, caption?, createdAt? }

    const filter: any = { publicId: { $exists: true, $ne: "" } };
    if (roomId) filter.roomId = roomId;

    const docs = await col
      .find(filter)
      .sort({ createdAt: -1 })
      .limit(Math.min(Math.max(limit, 1), 10))
      .toArray();

    const slides = docs.map((d) => {
      const id = d.publicId as string;
      return {
        id: String(d._id),
        roomId: d.roomId,
        caption: d.caption || "",
        createdAt: d.createdAt ?? null,
        thumb: cloudinaryUrl(id, { w: 360, h: 240, q: 70, f: "auto" }),
        view: cloudinaryUrl(id, { w: 1280, h: 720, q: 80, f: "auto" }),
        full: cloudinaryUrl(id, { w: 1920, h: 1080, q: 85, f: "auto" }),
      };
    });

    // üîÆ –ü–æ–∫–∏ —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ ‚Äú–ª—é–¥—è–Ω–æ‚Äù: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–∞–π–¥–∏ + eco-–∞–Ω–æ–Ω—Å –∞–Ω–∞–ª—ñ–∑—É.
    // –î–∞–ª—ñ —Å—é–¥–∏ –º–æ–∂–Ω–∞ –ø—ñ–¥'—î–¥–Ω–∞—Ç–∏ ML-–æ–ø–∏—Å –∫–∞–¥—Ä—É –∞–±–æ –º–æ–¥–∞–ª—å–Ω–µ Q/A.
    return NextResponse.json({
      ok: true,
      prompt,
      count: slides.length,
      slides,
      message:
        slides.length === 0
          ? "–°–ª–∞–π–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó—Ä–æ–±–∏ –∑–Ω—ñ–º–æ–∫ —É Vision ‚Üí Mongo ‚Üí Cloudinary."
          : "–°–ª–∞–π–¥–∏ –≥–æ—Ç–æ–≤—ñ. –ê–Ω–∞–ª—ñ—Ç–∏–∫—É –∫–∞–¥—Ä—ñ–≤ –ø—ñ–¥‚Äô—î–¥–Ω–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º.",
    });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: e.message || "server error" }, { status: 500 });
  }
}
